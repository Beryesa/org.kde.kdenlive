From 9bcde4daaee79868bbd61956ddc6c0512ffd39c4 Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Sat, 13 Apr 2024 02:49:25 +0300
Subject: [PATCH 01/10] Audio recording implementation for Qt6

---
 src/capture/mediacapture.cpp | 268 ++++++++++++++++++++++++++++-------
 src/capture/mediacapture.h   |   8 +-
 2 files changed, 223 insertions(+), 53 deletions(-)

diff --git a/src/capture/mediacapture.cpp b/src/capture/mediacapture.cpp
index 322136e657..622e7de647 100644
--- a/src/capture/mediacapture.cpp
+++ b/src/capture/mediacapture.cpp
@@ -10,6 +10,8 @@ SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
 #include "audiomixer/mixermanager.hpp"
 #include "core.h"
 #include "kdenlivesettings.h"
+#include <QAudioDevice>
+#include <QAudioInput>
 #include <QAudioOutput>
 // TODO: fix video capture (Hint: QCameraInfo is not available in Qt6 anymore)
 //#include <QCameraInfo>
@@ -67,7 +69,41 @@ AudioDevInfo::AudioDevInfo(const QAudioFormat &format, QObject *parent)
         break;
     }
 #else
-    // TODO: qt6
+    switch (m_format.bytesPerSample() * 8) { // why not)
+    case 8:
+        switch (m_format.sampleFormat()) {
+        case QAudioFormat::UInt8:
+            maxAmplitude = 255;
+            break;
+        default:
+            maxAmplitude = 127;
+            break;
+        }
+        break;
+    case 16:
+        switch (m_format.sampleFormat()) {
+        case QAudioFormat::UInt8:
+            maxAmplitude = 65535;
+            break;
+        default:
+            maxAmplitude = 32767;
+            break;
+        }
+        break;
+
+    case 32:
+        switch (m_format.sampleFormat()) {
+        case QAudioFormat::UInt8:
+            maxAmplitude = 0xffffffff;
+            break;
+        default:
+            maxAmplitude = 0x7fffffff;
+            break;
+        }
+        break;
+    default:
+        break;
+    }
 #endif
 }
 
@@ -139,7 +175,75 @@ qint64 AudioDevInfo::writeData(const char *data, qint64 len)
         Q_EMIT levelChanged(dbLevels);
     }
 #else
-    // TODO: qt6
+    if (maxAmplitude) {
+        Q_ASSERT(m_format.bytesPerSample() * 8 % 8 == 0);
+        const int channelBytes = m_format.bytesPerSample();
+        const int sampleBytes = m_format.channelCount() * channelBytes;
+        Q_ASSERT(len % sampleBytes == 0);
+        const int numSamples = len / sampleBytes;
+
+        const unsigned char *ptr = reinterpret_cast<const unsigned char *>(data);
+        QVector<quint32> levels;
+        for (int j = 0; j < m_format.channelCount(); ++j) {
+            levels << 0;
+        }
+        for (int i = 0; i < numSamples; ++i) {
+            for (int j = 0; j < m_format.channelCount(); ++j) {
+                quint32 value = 0;
+                switch (m_format.bytesPerSample() * 8) {
+                case 8:
+                    switch (m_format.sampleFormat()) {
+                    case QAudioFormat::UInt8:
+                        value = *reinterpret_cast<const quint8 *>(ptr);
+                        break;
+                    default:
+                        value = qAbs(*reinterpret_cast<const qint8 *>(ptr));
+                        break;
+                    }
+                    break;
+                case 16:
+                    switch (m_format.sampleFormat()) {
+                    case QAudioFormat::UInt8:
+                        value = *reinterpret_cast<const quint16 *>(ptr);
+                        break;
+                    default:
+                        value = qAbs(*reinterpret_cast<const quint16 *>(ptr));
+                        break;
+                    }
+                    break;
+                case 32:
+                    switch (m_format.sampleFormat()) {
+                    case QAudioFormat::UInt8:
+                        value = *reinterpret_cast<const quint32 *>(ptr);
+                        break;
+                    case QAudioFormat::Int16:
+                    case QAudioFormat::Int32:
+                        value = qAbs(*reinterpret_cast<const quint32 *>(ptr));
+                        break;
+                    case QAudioFormat::Float:
+                        value = qAbs(*reinterpret_cast<const float *>(ptr) * 0x7fffffff);
+                    default:
+                        break;
+                    }
+                    break;
+                default:
+                    break;
+                }
+                levels[j] = qMax(value, levels.at(j));
+                ptr += channelBytes;
+            }
+        }
+        QVector<qreal> dbLevels;
+        QVector<qreal> recLevels;
+        for (int j = 0; j < m_format.channelCount(); ++j) {
+            qreal val = qMin(levels.at(j), maxAmplitude);
+            val = 20. * log10(val / maxAmplitude);
+            recLevels << val;
+            dbLevels << IEC_ScaleMax(val, 0);
+        }
+        Q_EMIT levelRecChanged(recLevels);
+        Q_EMIT levelChanged(dbLevels);
+    }
 #endif
     return len;
 }
@@ -234,7 +338,71 @@ void MediaCapture::switchMonitorState(bool run)
         m_audioInput.reset();
     }
 #else
-    // TODO: qt6
+    if (run) {
+        // Start monitoring audio
+        QAudioFormat format;
+        format.setSampleRate(KdenliveSettings::audiocapturesamplerate());
+        format.setChannelCount(KdenliveSettings::audiocapturechannels());
+        format.setSampleFormat(QAudioFormat::Int16);
+        //        format.setSampleType(QAudioFormat::SignedInt);
+        //        format.setByteOrder(QAudioFormat::LittleEndian);
+        //        format.setCodec("audio/pcm");
+        QAudioDevice deviceInfo = QMediaDevices::defaultAudioInput();
+        if (!m_audioDevice.isEmpty()) {
+            const auto deviceInfos = QMediaDevices::audioInputs();
+            for (const QAudioDevice &devInfo : deviceInfos) {
+                qDebug() << "Device name: " << devInfo.description();
+                if (devInfo.description() == m_audioDevice) {
+                    deviceInfo = devInfo;
+                    break;
+                }
+            }
+        }
+        if (!deviceInfo.isFormatSupported(format)) {
+            qWarning() << "Default format not supported - trying to use preferred";
+            format = deviceInfo.preferredFormat();
+        }
+        m_audioInfo.reset(new AudioDevInfo(format));
+        m_audioInput.reset();
+        m_audioInput = std::make_unique<QAudioInput>(deviceInfo, this);
+        m_audioSource = std::make_unique<QAudioSource>(deviceInfo, format, this);
+        QObject::connect(m_audioInfo.data(), &AudioDevInfo::levelChanged, m_audioInput.get(), [&](const QVector<qreal> &level) {
+            m_levels = level;
+            if (m_recordState == QMediaRecorder::RecordingState) {
+                // Get the frame number
+                int currentPos = qRound(m_recTimer.elapsed() / 1000. * pCore->getCurrentFps());
+                if (currentPos > m_lastPos) {
+                    // Only store 1 value per frame
+                    switch (level.count()) {
+                    case 2:
+                        for (int i = 0; i < currentPos - m_lastPos; i++) {
+                            m_recLevels << qMax(level.first(), level.last());
+                        }
+                        break;
+                    default:
+                        for (int i = 0; i < currentPos - m_lastPos; i++) {
+                            m_recLevels << level.first();
+                        }
+                        break;
+                    }
+                    m_lastPos = currentPos;
+                    Q_EMIT recDurationChanged();
+                }
+            }
+            Q_EMIT levelsChanged();
+        });
+        QObject::connect(m_audioInfo.data(), &AudioDevInfo::levelRecChanged, this, &MediaCapture::audioLevels);
+        qreal linearVolume = QAudio::convertVolume(KdenliveSettings::audiocapturevolume() / 100.0, QAudio::LogarithmicVolumeScale, QAudio::LinearVolumeScale);
+        m_audioInput->setVolume(linearVolume);
+        m_audioInfo->open(QIODevice::WriteOnly);
+        m_audioSource->start(m_audioInfo.data());
+    } else {
+        if (m_audioInfo) {
+            m_audioInfo->close();
+            m_audioInfo.reset();
+        }
+        m_audioSource->reset();
+    }
 #endif
 }
 
@@ -269,10 +437,9 @@ void MediaCapture::resetIfUnused()
         m_audioRecorder.reset();
     }
 #else
-    // TODO: Qt6
-    /*if (m_audioRecorder && m_audioRecorder->state() == QMediaRecorder::StoppedState) {
-        m_audioRecorder.reset();
-    }*/
+    if (m_mediaCapture && m_mediaRecorder->recorderState() == QMediaRecorder::StoppedState) {
+        m_mediaCapture.reset();
+    }
 #endif
 }
 
@@ -331,10 +498,9 @@ void MediaCapture::recordAudio(int tid, bool record)
         m_audioRecorder->record();
     }
 #else
-    // TODO: Qt6
-    /*if (!m_audioRecorder) {
-        m_audioRecorder = std::make_unique<QAudioRecorder>(this);
-        connect(m_audioRecorder.get(), &QAudioRecorder::stateChanged, this, [&, tid](QMediaRecorder::State state) {
+    if (!m_mediaRecorder) {
+        m_mediaRecorder = std::make_unique<QMediaRecorder>(this);
+        connect(m_mediaRecorder.get(), &QMediaRecorder::recorderStateChanged, this, [&, tid](QMediaRecorder::RecorderState state) {
             m_recordState = state;
             if (m_recordState == QMediaRecorder::StoppedState) {
                 m_resetTimer.start();
@@ -352,35 +518,41 @@ void MediaCapture::recordAudio(int tid, bool record)
         });
     }
 
-    if (record && m_audioRecorder->state() == QMediaRecorder::StoppedState) {
+    if (!m_mediaCapture) {
+        m_mediaCapture = std::make_unique<QMediaCaptureSession>(this);
+    }
+
+    if (record && m_mediaRecorder->recorderState() == QMediaRecorder::StoppedState) {
         m_recTimer.invalidate();
         m_resetTimer.stop();
         m_readyForRecord = true;
         setAudioCaptureDevice();
-        m_audioRecorder->setAudioInput(m_audioDevice);
+        m_mediaCapture->setAudioInput(m_audioInput.get());
+        m_mediaCapture->setRecorder(m_mediaRecorder.get());
         setCaptureOutputLocation();
         qreal linearVolume = QAudio::convertVolume(KdenliveSettings::audiocapturevolume() / 100.0, QAudio::LogarithmicVolumeScale, QAudio::LinearVolumeScale);
-        m_audioRecorder->setVolume(linearVolume);
+        m_audioInput->setVolume(linearVolume);
         // qDebug()<<"START AREC: "<<m_path<<"\n; CODECS: "<<m_audioRecorder->supportedAudioCodecs();
-        connect(m_audioRecorder.get(), static_cast<void (QAudioRecorder::*)(QMediaRecorder::Error)>(&QAudioRecorder::error), this,
-                &MediaCapture::displayErrorMessage);
+        connect(m_mediaRecorder.get(), &QMediaRecorder::errorChanged, this, &MediaCapture::displayErrorMessage);
 
-        QAudioEncoderSettings audioSettings;
         // audioSettings.setCodec("audio/x-flac");
-        audioSettings.setSampleRate(KdenliveSettings::audiocapturesamplerate());
-        audioSettings.setChannelCount(KdenliveSettings::audiocapturechannels());
-        m_audioRecorder->setEncodingSettings(audioSettings);
-        m_audioRecorder->setOutputLocation(m_path);
+        m_mediaRecorder->setAudioSampleRate(KdenliveSettings::audiocapturesamplerate());
+        m_mediaRecorder->setAudioChannelCount(KdenliveSettings::audiocapturechannels());
+        m_mediaRecorder->setOutputLocation(m_path);
+
+        QMediaFormat mediaFormat(QMediaFormat::FileFormat::Wave);
+
+        m_mediaRecorder->setMediaFormat(mediaFormat);
         m_recLevels.clear();
     } else if (!record) {
-        m_audioRecorder->stop();
+        m_mediaRecorder->stop();
         m_recTimer.invalidate();
     } else {
         qDebug() << "::: RESTARTING RECORD\n\nBBBBBB";
         m_lastPos = -1;
         m_recTimer.start();
-        m_audioRecorder->record();
-    } */
+        m_mediaRecorder->record();
+    }
 #endif
 }
 
@@ -392,8 +564,7 @@ int MediaCapture::startCapture()
 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
     m_audioRecorder->record();
 #else
-    // TODO: Qt6
-    //m_audioRecorder->record();
+    m_mediaRecorder->record();
 #endif
     m_readyForRecord = false;
     return m_tid;
@@ -452,17 +623,15 @@ void MediaCapture::setCaptureOutputLocation()
     if (m_videoRecorder.get() != nullptr) {
         extension = QStringLiteral(".mpeg");
 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
-    // TODO: Qt6
     } else if (m_audioRecorder.get() != nullptr) {
         // extension = QStringLiteral(".flac");
         extension = QStringLiteral(".wav");
     }
 #else
-    // TODO: Qt6
-    } /*else if (m_audioRecorder.get() != nullptr) {
+    } else if (m_mediaRecorder != nullptr) {
         // extension = QStringLiteral(".flac");
         extension = QStringLiteral(".wav");
-    }*/
+    }
 #endif
     QString path = captureFolder.absoluteFilePath("capture0000" + extension);
     int fileCount = 1;
@@ -487,12 +656,11 @@ QStringList MediaCapture::getAudioCaptureDevices()
     audioRecorder.reset();
     return audioDevices;
 #else
-    // TODO: Qt6
-    /*std::unique_ptr<QAudioRecorder> audioRecorder = std::make_unique<QAudioRecorder>(this);
-    QStringList audioDevices = audioRecorder->audioInputs();
-    audioRecorder.reset();
-    return audioDevices;*/
-    return {};
+    QStringList audioDevices = {};
+    QList<QAudioDevice> audioInputs = QMediaDevices::audioInputs();
+    std::transform(audioInputs.begin(), audioInputs.end(), std::back_inserter(audioDevices),
+                   [](const QAudioDevice &audioDevice) -> QString { return audioDevice.description(); });
+    return audioDevices;
 #endif
 }
 
@@ -516,12 +684,7 @@ void MediaCapture::setAudioVolume()
     }
 #else
     // TODO: Qt6
-    /*if (m_audioRecorder) {
-        m_audioRecorder->setVolume(linearVolume);
-    }
-    if (m_audioInput) {
-        m_audioInput->setVolume(linearVolume);
-    }*/
+    m_audioInput->setVolume(linearVolume);
 #endif
 }
 
@@ -535,6 +698,9 @@ int MediaCapture::getState()
     }
 #else
     // TODO: Qt6
+    if (m_mediaCapture != nullptr) {
+        currentState = m_mediaRecorder->recorderState();
+    }
     /*if (m_audioRecorder != nullptr) {
         currentState = m_audioRecorder->state();
     } else if (m_videoRecorder != nullptr) {
@@ -565,10 +731,10 @@ bool MediaCapture::isRecording() const
     }
 #else
     //TODO: Qt6
-    /*if (m_readyForRecord || (m_audioRecorder && m_audioRecorder->state() != QMediaRecorder::StoppedState)) {
+    if (m_readyForRecord || (m_mediaCapture && m_mediaRecorder->recorderState() != QMediaRecorder::StoppedState)) {
         return true;
     }
-    if (m_videoRecorder && m_videoRecorder->state() != QMediaRecorder::StoppedState) {
+    /*if (m_videoRecorder && m_videoRecorder->state() != QMediaRecorder::StoppedState) {
         return true;
     }*/
 #endif
@@ -589,14 +755,14 @@ void MediaCapture::pauseRecording()
     }
 #else
     // TODO: Qt6
-    /*m_audioRecorder->pause();
-    if (m_audioRecorder->state() == QMediaRecorder::RecordingState) {
+    m_mediaRecorder->pause();
+    if (m_mediaRecorder->recorderState() == QMediaRecorder::RecordingState) {
         // Pause is not supported on this platform
         qDebug() << ":::: PAUSING FAILED!!!!";
-        m_audioRecorder->stop();
+        m_mediaRecorder->stop();
     } else {
         qDebug() << ":::: MEDIA CAPTURE PAUSED!!!!";
-    }*/
+    }
 #endif
 }
 
@@ -612,11 +778,11 @@ void MediaCapture::resumeRecording()
     }
 #else
     // TODO: Qt6
-    /*if (m_audioRecorder->state() == QMediaRecorder::PausedState) {
+    if (m_mediaRecorder->recorderState() == QMediaRecorder::PausedState) {
         m_recOffset += m_lastPos;
         m_lastPos = -1;
         m_recTimer.start();
-        m_audioRecorder->record();
-    }*/
+        m_mediaRecorder->record();
+    }
 #endif
 }
diff --git a/src/capture/mediacapture.h b/src/capture/mediacapture.h
index 3e5796dc04..104fe56a1e 100644
--- a/src/capture/mediacapture.h
+++ b/src/capture/mediacapture.h
@@ -14,9 +14,12 @@ SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
 #else
 #include <QMediaCaptureSession>
 #endif
+#include <QAudioSource>
 #include <QCamera>
 #include <QElapsedTimer>
 #include <QIODevice>
+#include <QMediaDevices>
+#include <QMediaFormat>
 #include <QMediaRecorder>
 #include <QMutex>
 #include <QStringList>
@@ -91,8 +94,9 @@ private:
 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
     std::unique_ptr<QAudioRecorder> m_audioRecorder;
 #else
-    // TODO: Qt6
-    // std::unique_ptr<QMediaCaptureSession> m_mediaCapture;
+    std::unique_ptr<QMediaCaptureSession> m_mediaCapture;
+    std::unique_ptr<QMediaRecorder> m_mediaRecorder;
+    std::unique_ptr<QAudioSource> m_audioSource;
 #endif
     std::unique_ptr<QAudioInput> m_audioInput;
     QScopedPointer<AudioDevInfo> m_audioInfo;
-- 
GitLab


From 9f368c76c0410ac37885c2597810e9c0c1f47d49 Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Sat, 13 Apr 2024 03:16:38 +0300
Subject: [PATCH 02/10] my bad

---
 src/capture/mediacapture.h | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/capture/mediacapture.h b/src/capture/mediacapture.h
index 104fe56a1e..5e86f1e09b 100644
--- a/src/capture/mediacapture.h
+++ b/src/capture/mediacapture.h
@@ -12,15 +12,15 @@ SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
 #include <QAudioRecorder>
 #else
+#include <QAudioSource>
 #include <QMediaCaptureSession>
+#include <QMediaDevices>
+#include <QMediaFormat>
+#include <QMediaRecorder>
 #endif
-#include <QAudioSource>
 #include <QCamera>
 #include <QElapsedTimer>
 #include <QIODevice>
-#include <QMediaDevices>
-#include <QMediaFormat>
-#include <QMediaRecorder>
 #include <QMutex>
 #include <QStringList>
 #include <QTimer>
-- 
GitLab


From 75124a201be23f8f1e04bac54ff4057bd5488477 Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Sat, 13 Apr 2024 03:16:38 +0300
Subject: [PATCH 03/10] my bad

---
 src/capture/mediacapture.cpp | 3 ---
 src/capture/mediacapture.h   | 2 ++
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/src/capture/mediacapture.cpp b/src/capture/mediacapture.cpp
index 622e7de647..a4300bedb5 100644
--- a/src/capture/mediacapture.cpp
+++ b/src/capture/mediacapture.cpp
@@ -10,9 +10,6 @@ SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
 #include "audiomixer/mixermanager.hpp"
 #include "core.h"
 #include "kdenlivesettings.h"
-#include <QAudioDevice>
-#include <QAudioInput>
-#include <QAudioOutput>
 // TODO: fix video capture (Hint: QCameraInfo is not available in Qt6 anymore)
 //#include <QCameraInfo>
 #include <QDir>
diff --git a/src/capture/mediacapture.h b/src/capture/mediacapture.h
index 5e86f1e09b..8e62ac6f1e 100644
--- a/src/capture/mediacapture.h
+++ b/src/capture/mediacapture.h
@@ -12,6 +12,8 @@ SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
 #include <QAudioRecorder>
 #else
+#include <QAudioDevice>
+#include <QAudioInput>
 #include <QAudioSource>
 #include <QMediaCaptureSession>
 #include <QMediaDevices>
-- 
GitLab


From 17339ccf8ba2bfe7c0237c8938595d3df672e98e Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Sat, 13 Apr 2024 05:16:29 +0300
Subject: [PATCH 04/10] Fixed my mistakes

---
 src/capture/mediacapture.cpp | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/capture/mediacapture.cpp b/src/capture/mediacapture.cpp
index a4300bedb5..94bbfbaa4a 100644
--- a/src/capture/mediacapture.cpp
+++ b/src/capture/mediacapture.cpp
@@ -204,7 +204,7 @@ qint64 AudioDevInfo::writeData(const char *data, qint64 len)
                         value = *reinterpret_cast<const quint16 *>(ptr);
                         break;
                     default:
-                        value = qAbs(*reinterpret_cast<const quint16 *>(ptr));
+                        value = qAbs(*reinterpret_cast<const qint16 *>(ptr));
                         break;
                     }
                     break;
@@ -215,7 +215,7 @@ qint64 AudioDevInfo::writeData(const char *data, qint64 len)
                         break;
                     case QAudioFormat::Int16:
                     case QAudioFormat::Int32:
-                        value = qAbs(*reinterpret_cast<const quint32 *>(ptr));
+                        value = qAbs(*reinterpret_cast<const qint32 *>(ptr));
                         break;
                     case QAudioFormat::Float:
                         value = qAbs(*reinterpret_cast<const float *>(ptr) * 0x7fffffff);
@@ -390,7 +390,7 @@ void MediaCapture::switchMonitorState(bool run)
         });
         QObject::connect(m_audioInfo.data(), &AudioDevInfo::levelRecChanged, this, &MediaCapture::audioLevels);
         qreal linearVolume = QAudio::convertVolume(KdenliveSettings::audiocapturevolume() / 100.0, QAudio::LogarithmicVolumeScale, QAudio::LinearVolumeScale);
-        m_audioInput->setVolume(linearVolume);
+        m_audioSource->setVolume(linearVolume);
         m_audioInfo->open(QIODevice::WriteOnly);
         m_audioSource->start(m_audioInfo.data());
     } else {
@@ -398,6 +398,7 @@ void MediaCapture::switchMonitorState(bool run)
             m_audioInfo->close();
             m_audioInfo.reset();
         }
+        m_audioInput.reset();
         m_audioSource->reset();
     }
 #endif
@@ -528,7 +529,7 @@ void MediaCapture::recordAudio(int tid, bool record)
         m_mediaCapture->setRecorder(m_mediaRecorder.get());
         setCaptureOutputLocation();
         qreal linearVolume = QAudio::convertVolume(KdenliveSettings::audiocapturevolume() / 100.0, QAudio::LogarithmicVolumeScale, QAudio::LinearVolumeScale);
-        m_audioInput->setVolume(linearVolume);
+        m_audioSource->setVolume(linearVolume);
         // qDebug()<<"START AREC: "<<m_path<<"\n; CODECS: "<<m_audioRecorder->supportedAudioCodecs();
         connect(m_mediaRecorder.get(), &QMediaRecorder::errorChanged, this, &MediaCapture::displayErrorMessage);
 
@@ -680,8 +681,7 @@ void MediaCapture::setAudioVolume()
         m_audioInput->setVolume(linearVolume);
     }
 #else
-    // TODO: Qt6
-    m_audioInput->setVolume(linearVolume);
+    m_audioSource->setVolume(linearVolume);
 #endif
 }
 
-- 
GitLab


From 051dabbf4028f0e92ecaf1910ea618aedfe8f583 Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Sat, 13 Apr 2024 19:46:06 +0300
Subject: [PATCH 05/10] Code cleanup

---
 src/capture/mediacapture.cpp | 12 +-----------
 1 file changed, 1 insertion(+), 11 deletions(-)

diff --git a/src/capture/mediacapture.cpp b/src/capture/mediacapture.cpp
index 94bbfbaa4a..e9217da611 100644
--- a/src/capture/mediacapture.cpp
+++ b/src/capture/mediacapture.cpp
@@ -694,13 +694,9 @@ int MediaCapture::getState()
         currentState = m_videoRecorder->state();
     }
 #else
-    // TODO: Qt6
     if (m_mediaCapture != nullptr) {
         currentState = m_mediaRecorder->recorderState();
-    }
-    /*if (m_audioRecorder != nullptr) {
-        currentState = m_audioRecorder->state();
-    } else if (m_videoRecorder != nullptr) {
+    } /*} else if (m_videoRecorder != nullptr) {
         currentState = m_videoRecorder->state();
     }*/
 #endif
@@ -727,13 +723,9 @@ bool MediaCapture::isRecording() const
         return true;
     }
 #else
-    //TODO: Qt6
     if (m_readyForRecord || (m_mediaCapture && m_mediaRecorder->recorderState() != QMediaRecorder::StoppedState)) {
         return true;
     }
-    /*if (m_videoRecorder && m_videoRecorder->state() != QMediaRecorder::StoppedState) {
-        return true;
-    }*/
 #endif
 
     return false;
@@ -751,7 +743,6 @@ void MediaCapture::pauseRecording()
         qDebug() << ":::: MEDIA CAPTURE PAUSED!!!!";
     }
 #else
-    // TODO: Qt6
     m_mediaRecorder->pause();
     if (m_mediaRecorder->recorderState() == QMediaRecorder::RecordingState) {
         // Pause is not supported on this platform
@@ -774,7 +765,6 @@ void MediaCapture::resumeRecording()
         m_audioRecorder->record();
     }
 #else
-    // TODO: Qt6
     if (m_mediaRecorder->recorderState() == QMediaRecorder::PausedState) {
         m_recOffset += m_lastPos;
         m_lastPos = -1;
-- 
GitLab


From e82e56a9cb62a34a4f44ce43f826aec8d3e3c08d Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Mon, 15 Apr 2024 19:30:56 +0300
Subject: [PATCH 06/10] small fixes

---
 src/capture/mediacapture.cpp | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/capture/mediacapture.cpp b/src/capture/mediacapture.cpp
index e9217da611..0bdb933451 100644
--- a/src/capture/mediacapture.cpp
+++ b/src/capture/mediacapture.cpp
@@ -521,6 +521,9 @@ void MediaCapture::recordAudio(int tid, bool record)
     }
 
     if (record && m_mediaRecorder->recorderState() == QMediaRecorder::StoppedState) {
+        if (!m_audioSource) {
+            this->switchMonitorState(true);
+        }
         m_recTimer.invalidate();
         m_resetTimer.stop();
         m_readyForRecord = true;
-- 
GitLab


From 57cb0443cf9f42287f70c6adb3a67ef9bc4666f5 Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Tue, 16 Apr 2024 06:30:19 +0300
Subject: [PATCH 07/10] bug fix

---
 src/timeline2/model/timelineitemmodel.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/timeline2/model/timelineitemmodel.cpp b/src/timeline2/model/timelineitemmodel.cpp
index 70e6e85956..01e0ac19f0 100644
--- a/src/timeline2/model/timelineitemmodel.cpp
+++ b/src/timeline2/model/timelineitemmodel.cpp
@@ -125,7 +125,7 @@ bool TimelineItemModel::addTracksAtPosition(int position, int tracksCount, QStri
                 insertionIndex++;
             }
             if (addRecTrack) {
-                setTrackProperty(newTid, "kdenlive:audio_rec", QStringLiteral("1"));
+                pCore->mixer()->monitorAudio(newTid, true); // I think it will be better
             }
         } else {
             break;
-- 
GitLab


From c8d55aa8cd5ef06fae761b12cfe77c089ea50ac1 Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Thu, 18 Apr 2024 04:18:43 +0300
Subject: [PATCH 08/10] Audio recording track fixes

---
 src/capture/mediacapture.cpp              | 59 ++++++++++++-----------
 src/capture/mediacapture.h                |  1 +
 src/timeline2/model/timelineitemmodel.cpp |  3 +-
 3 files changed, 35 insertions(+), 28 deletions(-)

diff --git a/src/capture/mediacapture.cpp b/src/capture/mediacapture.cpp
index 0bdb933451..65275c0ea3 100644
--- a/src/capture/mediacapture.cpp
+++ b/src/capture/mediacapture.cpp
@@ -267,6 +267,36 @@ void MediaCapture::switchMonitorState(int tid, bool run)
     pCore->mixer()->monitorAudio(tid, run);
 }
 
+void MediaCapture::initializeAudioSetup()
+{
+    QAudioFormat format;
+    format.setSampleRate(KdenliveSettings::audiocapturesamplerate());
+    format.setChannelCount(KdenliveSettings::audiocapturechannels());
+    format.setSampleFormat(QAudioFormat::Int16);
+    //        format.setSampleType(QAudioFormat::SignedInt);
+    //        format.setByteOrder(QAudioFormat::LittleEndian);
+    //        format.setCodec("audio/pcm");
+    QAudioDevice deviceInfo = QMediaDevices::defaultAudioInput();
+    if (!m_audioDevice.isEmpty()) {
+        const auto deviceInfos = QMediaDevices::audioInputs();
+        for (const QAudioDevice &devInfo : deviceInfos) {
+            qDebug() << "Device name: " << devInfo.description();
+            if (devInfo.description() == m_audioDevice) {
+                deviceInfo = devInfo;
+                break;
+            }
+        }
+    }
+    if (!deviceInfo.isFormatSupported(format)) {
+        qWarning() << "Default format not supported - trying to use preferred";
+        format = deviceInfo.preferredFormat();
+    }
+    m_audioInfo.reset(new AudioDevInfo(format));
+    m_audioInput.reset();
+    m_audioInput = std::make_unique<QAudioInput>(deviceInfo, this);
+    m_audioSource = std::make_unique<QAudioSource>(deviceInfo, format, this);
+}
+
 void MediaCapture::switchMonitorState(bool run)
 {
 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
@@ -337,32 +367,7 @@ void MediaCapture::switchMonitorState(bool run)
 #else
     if (run) {
         // Start monitoring audio
-        QAudioFormat format;
-        format.setSampleRate(KdenliveSettings::audiocapturesamplerate());
-        format.setChannelCount(KdenliveSettings::audiocapturechannels());
-        format.setSampleFormat(QAudioFormat::Int16);
-        //        format.setSampleType(QAudioFormat::SignedInt);
-        //        format.setByteOrder(QAudioFormat::LittleEndian);
-        //        format.setCodec("audio/pcm");
-        QAudioDevice deviceInfo = QMediaDevices::defaultAudioInput();
-        if (!m_audioDevice.isEmpty()) {
-            const auto deviceInfos = QMediaDevices::audioInputs();
-            for (const QAudioDevice &devInfo : deviceInfos) {
-                qDebug() << "Device name: " << devInfo.description();
-                if (devInfo.description() == m_audioDevice) {
-                    deviceInfo = devInfo;
-                    break;
-                }
-            }
-        }
-        if (!deviceInfo.isFormatSupported(format)) {
-            qWarning() << "Default format not supported - trying to use preferred";
-            format = deviceInfo.preferredFormat();
-        }
-        m_audioInfo.reset(new AudioDevInfo(format));
-        m_audioInput.reset();
-        m_audioInput = std::make_unique<QAudioInput>(deviceInfo, this);
-        m_audioSource = std::make_unique<QAudioSource>(deviceInfo, format, this);
+        this->initializeAudioSetup();
         QObject::connect(m_audioInfo.data(), &AudioDevInfo::levelChanged, m_audioInput.get(), [&](const QVector<qreal> &level) {
             m_levels = level;
             if (m_recordState == QMediaRecorder::RecordingState) {
@@ -522,7 +527,7 @@ void MediaCapture::recordAudio(int tid, bool record)
 
     if (record && m_mediaRecorder->recorderState() == QMediaRecorder::StoppedState) {
         if (!m_audioSource) {
-            this->switchMonitorState(true);
+            this->initializeAudioSetup();
         }
         m_recTimer.invalidate();
         m_resetTimer.stop();
diff --git a/src/capture/mediacapture.h b/src/capture/mediacapture.h
index 8e62ac6f1e..68b3f5bdac 100644
--- a/src/capture/mediacapture.h
+++ b/src/capture/mediacapture.h
@@ -86,6 +86,7 @@ public:
     void resumeRecording();
     /** @brief Start the real audio capture **/
     int startCapture();
+    void initializeAudioSetup();
 
 public Q_SLOTS:
     void displayErrorMessage();
diff --git a/src/timeline2/model/timelineitemmodel.cpp b/src/timeline2/model/timelineitemmodel.cpp
index 3f3c482dc7..e977ea8379 100644
--- a/src/timeline2/model/timelineitemmodel.cpp
+++ b/src/timeline2/model/timelineitemmodel.cpp
@@ -125,7 +125,8 @@ bool TimelineItemModel::addTracksAtPosition(int position, int tracksCount, QStri
                 insertionIndex++;
             }
             if (addRecTrack) {
-                pCore->mixer()->monitorAudio(newTid, true); // I think it will be better
+                // TODO: make inserted audio recording track use monitor
+                setTrackProperty(newTid, "kdenlive:audio_rec", QStringLiteral("1"));
             }
         } else {
             break;
-- 
GitLab


From 9d69ef3a62f062a120fb31a5d5008fe1e0506e0a Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Thu, 18 Apr 2024 01:42:18 +0000
Subject: [PATCH 09/10] ahh

---
 src/capture/mediacapture.cpp | 2 ++
 src/capture/mediacapture.h   | 2 ++
 2 files changed, 4 insertions(+)

diff --git a/src/capture/mediacapture.cpp b/src/capture/mediacapture.cpp
index 65275c0ea3..bd53cb2d3f 100644
--- a/src/capture/mediacapture.cpp
+++ b/src/capture/mediacapture.cpp
@@ -267,6 +267,7 @@ void MediaCapture::switchMonitorState(int tid, bool run)
     pCore->mixer()->monitorAudio(tid, run);
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) 
 void MediaCapture::initializeAudioSetup()
 {
     QAudioFormat format;
@@ -296,6 +297,7 @@ void MediaCapture::initializeAudioSetup()
     m_audioInput = std::make_unique<QAudioInput>(deviceInfo, this);
     m_audioSource = std::make_unique<QAudioSource>(deviceInfo, format, this);
 }
+#endif
 
 void MediaCapture::switchMonitorState(bool run)
 {
diff --git a/src/capture/mediacapture.h b/src/capture/mediacapture.h
index 68b3f5bdac..5bda6686b5 100644
--- a/src/capture/mediacapture.h
+++ b/src/capture/mediacapture.h
@@ -86,7 +86,9 @@ public:
     void resumeRecording();
     /** @brief Start the real audio capture **/
     int startCapture();
+    #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
     void initializeAudioSetup();
+    #endif
 
 public Q_SLOTS:
     void displayErrorMessage();
-- 
GitLab


From 68f1a8327be6f24960a6400a82c5b27485a00f36 Mon Sep 17 00:00:00 2001
From: Lev Maslov <maslovkk@protonmail.com>
Date: Thu, 18 Apr 2024 04:33:29 +0000
Subject: [PATCH 10/10] oops

---
 src/capture/mediacapture.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/capture/mediacapture.h b/src/capture/mediacapture.h
index 5bda6686b5..a42d984940 100644
--- a/src/capture/mediacapture.h
+++ b/src/capture/mediacapture.h
@@ -86,7 +86,7 @@ public:
     void resumeRecording();
     /** @brief Start the real audio capture **/
     int startCapture();
-    #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+    #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     void initializeAudioSetup();
     #endif
 
-- 
GitLab

